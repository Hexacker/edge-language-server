const { TextDocument } = require('vscode-languageserver-textdocument');\nconst { EdgeValidator } = require('../src/server/validator');\n\ndescribe('EdgeValidator', () => {\n  let validator: any;\n  \n  beforeAll(() => {\n    validator = new EdgeValidator();\n  });\n\n  it('should validate @if directive syntax', () => {\n    const document = TextDocument.create('test.edge', 'edge', 1, '@if(condition)\\n  Content\\n@endif');\n    // Mock tree structure for @if directive\n    const tree = {\n      rootNode: {\n        type: 'document',\n        childCount: 1,\n        child: jest.fn().mockReturnValue({\n          type: 'if_directive',\n          text: '@if(condition)',\n          startIndex: 0,\n          endIndex: 14,\n          children: [\n            {\n              type: 'condition',\n              text: 'condition'\n            }\n          ]\n        })\n      }\n    };\n    \n    const diagnostics = validator.validate(tree, document);\n    // Should not have errors for valid @if syntax\n    expect(diagnostics.length).toBe(0);\n  });\n\n  it('should validate @each directive syntax', () => {\n    const document = TextDocument.create('test.edge', 'edge', 1, '@each(item in items)\\n  {{ item }}\\n@endforeach');\n    // Mock tree structure for @each directive\n    const tree = {\n      rootNode: {\n        type: 'document',\n        childCount: 1,\n        child: jest.fn().mockReturnValue({\n          type: 'each_directive',\n          text: '@each(item in items)',\n          startIndex: 0,\n          endIndex: 20,\n          children: []\n        })\n      }\n    };\n    \n    const diagnostics = validator.validate(tree, document);\n    // Should not have errors for valid @each syntax\n    expect(diagnostics.length).toBe(0);\n  });\n\n  it('should validate @component directive syntax', () => {\n    const document = TextDocument.create('test.edge', 'edge', 1, \"@component('button')\\n  @slot('text')\\n    Click me\\n  @endslot\\n@endcomponent\");\n    // Mock tree structure for @component directive\n    const tree = {\n      rootNode: {\n        type: 'document',\n        childCount: 1,\n        child: jest.fn().mockReturnValue({\n          type: 'component_directive',\n          text: \"@component('button')\",\n          startIndex: 0,\n          endIndex: 20,\n          children: [\n            {\n              type: 'string',\n              text: \"'button'\"\n            }\n          ]\n        })\n      }\n    };\n    \n    const diagnostics = validator.validate(tree, document);\n    // Should not have errors for valid @component syntax\n    expect(diagnostics.length).toBe(0);\n  });\n\n  it('should validate matching block directives', () => {\n    const document = TextDocument.create('test.edge', 'edge', 1, '@if(condition)\\n  Content\\n@endif');\n    // Mock tree structure with properly matched blocks\n    const tree = {\n      rootNode: {\n        type: 'document',\n        childCount: 1,\n        child: jest.fn().mockReturnValue({\n          type: 'if_directive',\n          text: '@if(condition)',\n          startIndex: 0,\n          endIndex: 14,\n          children: [\n            {\n              type: 'condition',\n              text: 'condition'\n            }\n          ]\n        })\n      }\n    };\n    \n    const diagnostics = validator.validate(tree, document);\n    // Should not have errors for properly matched blocks\n    expect(diagnostics.length).toBe(0);\n  });\n\n  it('should detect unmatched block directives', () => {\n    const document = TextDocument.create('test.edge', 'edge', 1, '@if(condition)\\n  Content');\n    // Mock tree structure with unmatched @if directive\n    const tree = {\n      rootNode: {\n        type: 'document',\n        childCount: 1,\n        child: jest.fn().mockReturnValue({\n          type: 'if_directive',\n          text: '@if(condition)',\n          startIndex: 0,\n          endIndex: 14,\n          children: [\n            {\n              type: 'condition',\n              text: 'condition'\n            }\n          ]\n        })\n      }\n    };\n    \n    const diagnostics = validator.validate(tree, document);\n    // Should have an error for unmatched @if directive\n    expect(diagnostics.length).toBeGreaterThan(0);\n    expect(diagnostics[0].message).toContain('missing @end');\n  });\n\n  it('should validate interpolations', () => {\n    const document = TextDocument.create('test.edge', 'edge', 1, '{{ variable }}');\n    // Mock tree structure for interpolation\n    const tree = {\n      rootNode: {\n        type: 'document',\n        childCount: 1,\n        child: jest.fn().mockReturnValue({\n          type: 'interpolation',\n          text: '{{ variable }}',\n          startIndex: 0,\n          endIndex: 13,\n          children: [\n            {\n              type: 'expression',\n              text: 'variable'\n            }\n          ]\n        })\n      }\n    };\n    \n    const diagnostics = validator.validate(tree, document);\n    // Should not have errors for valid interpolation\n    expect(diagnostics.length).toBe(0);\n  });\n});